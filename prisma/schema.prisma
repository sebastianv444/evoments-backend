// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EventoEstado {
  ACTIVO
  CANCELADO
  FINALIZADO
}

enum AsientoEstado {
  DISPONIBLE
  RESERVADO
  VENDIDO
}

enum EntradaEstado {
  ACTIVA
  CANCELADA
  USADA
}

enum MetodoPago {
  TARJETA
  TRANSFERENCIA
  PAYPAL
  EFECTIVO
}

enum PagoEstado {
  PENDIENTE
  APROBADO
  RECHAZADO
}

/// =======
/// TABLAS
/// =======
model Cliente {
  id            Int      @id @default(autoincrement())
  clerkUserId   String   @unique
  nombre        String   @db.VarChar(100)
  apellidos     String   @db.VarChar(100)
  email         String   @unique @db.VarChar(150) 
  telefono      String?  @db.VarChar(20)
  fechaRegistro DateTime @default(now()) @map("fecha_registro")

  entradas Entrada[]
}

model Creador {
  id            Int      @id @default(autoincrement())
  nombre        String   @db.VarChar(100)
  apellidos     String   @db.VarChar(100)
  email         String   @unique @db.VarChar(150)
  password      String   @db.VarChar(255)
  telefono      String?  @db.VarChar(20)
  tarjetaToken  String   @map("tarjeta_token") @db.VarChar(100)
  tarjetaLast4  String   @map("tarjeta_last4") @db.Char(4)
  tarjetaExpiry String   @map("tarjeta_expiry") @db.Char(5)
  fechaRegistro DateTime @default(now()) @map("fecha_registro")

  eventos Evento[]
}

model Venue {
  id             Int      @id @default(autoincrement())
  nombre         String   @db.VarChar(150)
  direccion      String   @db.VarChar(255)
  localidad      String   @default("Madrid") @db.VarChar(100)
  capacidadTotal Int      @map("capacidad_total") @db.Int
  descripcion    String?  @db.Text
  fechaCreacion  DateTime @default(now()) @map("fecha_creacion")

  eventos     Evento[]
  zonasEvento ZonaEvento[]
}

model Evento {
  id            Int          @id @default(autoincrement())
  creadorId     Int          @map("id_creador")
  venueId       Int          @map("id_venue")
  titulo        String       @db.VarChar(150)
  descripcion   String?      @db.Text
  fechaEvento   DateTime     @map("fecha_evento")
  imagen        String?      @db.VarChar(255)
  estado        EventoEstado @default(ACTIVO)
  fechaCreacion DateTime     @default(now()) @map("fecha_creacion")

  creador     Creador      @relation(fields: [creadorId], references: [id], onDelete: Cascade)
  venue       Venue        @relation(fields: [venueId], references: [id], onDelete: Restrict)
  zonasEvento ZonaEvento[]
  entradas    Entrada[]
}

model ZonaEvento {
  id          Int     @id @default(autoincrement())
  eventoId    Int     @map("id_evento")
  nombre      String  @db.VarChar(100)
  capacidad   Int     @db.Int
  precioBase  Decimal @map("precio_base") @db.Decimal(10, 2)
  descripcion String? @db.VarChar(255)

  evento   Evento    @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  asientos Asiento[]
  entradas Entrada[]
  Venue    Venue?    @relation(fields: [venueId], references: [id])
  venueId  Int?
}

model Asiento {
  id     Int           @id @default(autoincrement())
  zonaId Int           @map("id_zona")
  fila   Int?          @db.Int
  numero Int?          @db.Int
  estado AsientoEstado @default(DISPONIBLE)

  zona     ZonaEvento @relation(fields: [zonaId], references: [id], onDelete: Cascade)
  entradas Entrada[]

  @@unique([zonaId, fila, numero])
}

model Entrada {
  id          Int           @id @default(autoincrement())
  eventoId    Int           @map("id_evento")
  clienteId   Int           @map("id_cliente")
  zonaId      Int           @map("id_zona")
  asientoId   Int?          @map("id_asiento")
  fechaCompra DateTime      @default(now()) @map("fecha_compra")
  estado      EntradaEstado @default(ACTIVA)

  evento     Evento     @relation(fields: [eventoId], references: [id], onDelete: Cascade)
  cliente    Cliente    @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  zonaEvento ZonaEvento @relation(fields: [zonaId], references: [id], onDelete: Restrict)
  asiento    Asiento?   @relation(fields: [asientoId], references: [id], onDelete: SetNull)
  pagos      Pago[]
}

model Pago {
  id              Int        @id @default(autoincrement())
  entradaId       Int        @map("id_entrada")
  metodoPago      MetodoPago @map("metodo_pago")
  linkComprobante String?    @map("link_comprobante") @db.VarChar(255)
  estadoPago      PagoEstado @default(PENDIENTE) @map("estado_pago")
  fechaPago       DateTime?  @map("fecha_pago")

  entrada Entrada @relation(fields: [entradaId], references: [id], onDelete: Cascade)
}
